-- Generated by Oracle SQL Developer Data Modeler 4.1.5.907
--   at:        2017-07-11 17:57:34 CEST
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c




CREATE TABLE cl_blocked_reason_dict
  (
    id_cl_blocked_reason_dict VARCHAR (10) NOT NULL ,
    blocked_reason_name       VARCHAR (200)
  ) ;
ALTER TABLE cl_blocked_reason_dict ADD CONSTRAINT cl_blocked_reason_dict_PK PRIMARY KEY ( id_cl_blocked_reason_dict ) ;
ALTER TABLE cl_blocked_reason_dict ADD CONSTRAINT cl_blocked_reason_dict__UN UNIQUE ( blocked_reason_name ) ;


CREATE TABLE cl_communication_log
  (
    id_cl_communication_log SERIAL NOT NULL ,
    client                  INTEGER ,
    communication_reason    VARCHAR (10) ,
    service                 INTEGER ,
    contact_type            VARCHAR (10) NOT NULL ,
    contact_address         VARCHAR (100) ,
    message_body TEXT ,
    minutes_before_action INTEGER ,
    notes                 INTEGER ,
    created_datetime      TIMESTAMP DEFAULT current_timestamp ,
    created_by            VARCHAR (10) DEFAULT current_user ,
    company_branch        VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
ALTER TABLE cl_communication_log ADD CONSTRAINT cl_communication_log_PK PRIMARY KEY ( id_cl_communication_log ) ;


CREATE TABLE cl_communication_reason
  (
    id_client_communication_reason VARCHAR (10) NOT NULL ,
    reason_name                    VARCHAR (100)
  ) ;
ALTER TABLE cl_communication_reason ADD CONSTRAINT cl_communication_reason_PK PRIMARY KEY ( id_client_communication_reason ) ;
ALTER TABLE cl_communication_reason ADD CONSTRAINT cl_communication_reason__UN UNIQUE ( reason_name ) ;


CREATE TABLE cl_discount
  (
    id_cl_discount SERIAL NOT NULL ,
    client         INTEGER NOT NULL ,
    discount       VARCHAR (10) NOT NULL ,
    company_branch VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
CREATE INDEX cl_discount__IDX ON cl_discount
  ( client ASC
  ) ;
ALTER TABLE cl_discount ADD CONSTRAINT cl_discount_PK PRIMARY KEY ( id_cl_discount ) ;
ALTER TABLE cl_discount ADD CONSTRAINT cl_discount__UNv1 UNIQUE ( client , discount ) ;


CREATE TABLE cl_params
  (
    max_debt                       MONEY NOT NULL ,
    allow_new_no_contact           BOOLEAN NOT NULL ,
    default_reminder_sms_minutes   INTEGER NOT NULL ,
    default_reminder_email_minutes INTEGER NOT NULL ,
    default_finished_info_sms      BOOLEAN NOT NULL ,
    default_finished_info_email    BOOLEAN NOT NULL ,
    max_worktime_wo_conf_minutes   INTEGER NOT NULL ,
    default_currency               VARCHAR (10) NOT NULL ,
    company_branch                 VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;


CREATE TABLE cl_payment
  (
    id_cl_payment    SERIAL NOT NULL ,
    is_closed        BOOLEAN ,
    payment_name     VARCHAR (200) ,
    client           INTEGER NOT NULL ,
    is_invoice       BOOLEAN ,
    contact          INTEGER NOT NULL ,
    invoice_voucher  VARCHAR (15) ,
    payment_sum      MONEY ,
    paid_amount      MONEY ,
    currency         VARCHAR (10) DEFAULT 'PLN' NOT NULL ,
    paid_datetime    TIMESTAMP ,
    posted_datetime  TIMESTAMP ,
    due_date         DATE ,
    notes            VARCHAR (400) ,
    created_datetime TIMESTAMP DEFAULT current_timestamp ,
    created_by       VARCHAR (10) ,
    company_branch   VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
CREATE INDEX cl_payment__IDX ON cl_payment
  (
    id_cl_payment ASC ,
    invoice_voucher ASC ,
    client ASC
  ) ;
ALTER TABLE cl_payment ADD CONSTRAINT cl_payment_PK PRIMARY KEY ( id_cl_payment ) ;
ALTER TABLE cl_payment ADD CONSTRAINT cl_payment__UN UNIQUE ( invoice_voucher ) ;


CREATE TABLE cl_payment_line
  (
    id_cl_payment_line SERIAL NOT NULL ,
    payment            INTEGER NOT NULL ,
    service            INTEGER NOT NULL ,
    text_on_invoice    VARCHAR (200) NOT NULL ,
    qty                REAL ,
    final_price        MONEY ,
    currency           VARCHAR (10) NOT NULL ,
    company_branch     VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
CREATE INDEX cl_payment_line__IDX ON cl_payment_line
  (
    id_cl_payment_line ASC ,
    payment ASC
  ) ;
ALTER TABLE cl_payment_line ADD CONSTRAINT cl_payment_line_PK PRIMARY KEY ( id_cl_payment_line ) ;

--tego niee...
CREATE TABLE cl_unconfirmed
  (
    cl_unconfirmed         SERIAL NOT NULL ,
    first_name             VARCHAR (20) ,
    last_name              VARCHAR (20) ,
    client_name            VARCHAR (200) ,
    created_datetime       TIMESTAMP DEFAULT current_timestamp ,
    ip_address             VARCHAR (20) ,
    email                  VARCHAR (50) ,
    phone                  VARCHAR (20) ,
    default_company_branch VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
ALTER TABLE cl_unconfirmed ADD CONSTRAINT cl_unconfirmed_PK PRIMARY KEY ( cl_unconfirmed ) ;


CREATE TABLE client
  (
    id_client                      SERIAL NOT NULL ,
    sex                            CHAR (1) ,
    first_name                     VARCHAR (20) ,
    last_name                      VARCHAR (20) ,
    is_company                     BOOLEAN ,
    client_name                    VARCHAR (200) ,
    nip                            VARCHAR (11) ,
    contact                        INTEGER ,
    is_blocked                     BOOLEAN ,
    blocked_reason_id              VARCHAR (10) ,
    blocked_notes                  VARCHAR (400) ,
    default_invoice                BOOLEAN ,
    default_reminder_sms_minutes   INTEGER ,
    is_confirmed                   BOOLEAN ,
    is_rejected                    BOOLEAN ,
    ip_address                     VARCHAR (20) ,
    default_reminder_email_minutes INTEGER ,
    default_finished_info_sms      INTEGER ,
    default_finished_info_email    INTEGER ,
    client_discount_percent_sum    REAL ,
    notes                          VARCHAR (400) ,
    default_company_branch         VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
CREATE INDEX client__IDXv2 ON client
  ( id_client ASC
  ) ;
ALTER TABLE client ADD CONSTRAINT client_PK PRIMARY KEY ( id_client ) ;
ALTER TABLE client ADD COLUMN client_user_login INTEGER;
ALTER TABLE client ADD CONSTRAINT client_client_user_login_auth_user_FK FOREIGN KEY ( client_user_login ) REFERENCES auth_user ( id ) ;


CREATE TABLE company_branch
  (
    id_company_branch VARCHAR (10) NOT NULL ,
    is_main           BOOLEAN ,
    company_name      VARCHAR (200) ,
    nip               VARCHAR (11) ,
    contact           INTEGER NOT NULL
  ) ;
ALTER TABLE company_branch ADD CONSTRAINT company_branch_PK PRIMARY KEY ( id_company_branch ) ;

CREATE TABLE company_description
  (
    id_company_description VARCHAR (10) NOT NULL ,
    description_long VARCHAR (10000),
    description_short VARCHAR (5000)
  ) ;

CREATE TABLE contact
  (
    id_contact            SERIAL NOT NULL ,
    prefered_contact_type VARCHAR (10) ,
    email                 VARCHAR (50) ,
    phone                 VARCHAR (20) ,
    street                VARCHAR (100) ,
    house_no              VARCHAR (5) ,
    apartment_no          VARCHAR (5) ,
    city                  VARCHAR (50) ,
    zip                   VARCHAR (10) ,
    country               VARCHAR (100) ,
    notes                 VARCHAR (400)
  ) ;
CREATE INDEX contact__IDX ON contact
  ( id_contact ASC
  ) ;
ALTER TABLE contact ADD CONSTRAINT contact_PK PRIMARY KEY ( id_contact ) ;
ALTER TABLE contact ADD CONSTRAINT contact_UN_email UNIQUE ( email ) ;


CREATE TABLE contact_type
  (
    id_contact_type   VARCHAR (10) NOT NULL ,
    contact_type_name VARCHAR (100)
  ) ;
ALTER TABLE contact_type ADD CONSTRAINT contact_type_PK PRIMARY KEY ( id_contact_type ) ;
ALTER TABLE contact_type ADD CONSTRAINT contact_type__UN UNIQUE ( contact_type_name ) ;


CREATE TABLE country_dict
  ( country VARCHAR (100) NOT NULL
  ) ;
ALTER TABLE country_dict ADD CONSTRAINT country_dict_PK PRIMARY KEY ( country ) ;


CREATE TABLE currrency
  (
    id_currency            VARCHAR (10) NOT NULL ,
    currency_name          VARCHAR (100) ,
    ratio_to_main_currency REAL
  ) ;
ALTER TABLE currrency ADD CONSTRAINT currrency_PK PRIMARY KEY ( id_currency ) ;
ALTER TABLE currrency ADD CONSTRAINT currrency__UN UNIQUE ( currency_name ) ;


CREATE TABLE discount_dict
  (
    id_discount_dict VARCHAR (10) NOT NULL ,
    discount_name    VARCHAR (100) ,
    scope            VARCHAR (10) NOT NULL ,
    discount_amount  REAL ,
    discount_percent REAL ,
    valid_from       DATE ,
    valid_to         DATE
  ) ;
CREATE INDEX discount_dict__IDX ON discount_dict
  ( id_discount_dict ASC
  ) ;
ALTER TABLE discount_dict ADD CONSTRAINT discount_dict_PK PRIMARY KEY ( id_discount_dict ) ;


CREATE TABLE discount_scope
  (
    id_discount_scope VARCHAR (10) NOT NULL
  ) ;
ALTER TABLE discount_scope ADD CONSTRAINT discount_scope_PK PRIMARY KEY ( id_discount_scope ) ;


CREATE TABLE location
  (
    id_location    SERIAL NOT NULL ,
    location_name  VARCHAR (200) ,
    location_type  VARCHAR (10) NOT NULL ,
    is_operational BOOLEAN ,
    notes          VARCHAR (400) ,
    company_branch VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
ALTER TABLE location ADD CONSTRAINT location_PK PRIMARY KEY ( id_location ) ;
ALTER TABLE location ADD CONSTRAINT location__UN UNIQUE ( location_name ) ;


CREATE TABLE location_type
  (
    id_location_type   VARCHAR (10) NOT NULL ,
    location_type_name VARCHAR (200) ,
    location_capacity  INTEGER DEFAULT 1
  ) ;
ALTER TABLE location_type ADD CONSTRAINT location_type_PK PRIMARY KEY ( id_location_type ) ;
ALTER TABLE location_type ADD CONSTRAINT location_type__UN UNIQUE ( location_type_name ) ;


CREATE TABLE machine
  (
    id_machine       SERIAL NOT NULL ,
    machine_name     VARCHAR (200) NOT NULL ,
    machine_type     VARCHAR (10) NOT NULL ,
    service_interval INTEGER ,
    last_service     DATE ,
    is_operational   BOOLEAN ,
    notes            VARCHAR (400) ,
    company_branch   VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
CREATE INDEX machine__IDX ON machine
  ( id_machine ASC
  ) ;
ALTER TABLE machine ADD CONSTRAINT machine_PK PRIMARY KEY ( id_machine ) ;


CREATE TABLE machine_type
  (
    id_machine_type   VARCHAR (10) NOT NULL ,
    machine_type_name VARCHAR (200) NOT NULL
  ) ;
ALTER TABLE machine_type ADD CONSTRAINT machine_type_PK PRIMARY KEY ( id_machine_type ) ;


CREATE TABLE resources_usage
  (
    id_resources_usage SERIAL NOT NULL ,
    service            INTEGER ,
    machine            INTEGER ,
    worker             INTEGER ,
    time_slot          TIMESTAMP NOT NULL ,
    calendar_date      DATE NOT NULL ,
    company_branch     VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
ALTER TABLE resources_usage ADD CONSTRAINT resources_usage_PK PRIMARY KEY ( id_resources_usage ) ;
--  ERROR: UK name length exceeds maximum allowed length(30)
ALTER TABLE resources_usage ADD CONSTRAINT resources_usage__UN_machine_slot_date UNIQUE ( machine , time_slot , calendar_date ) ;
--  ERROR: UK name length exceeds maximum allowed length(30)
ALTER TABLE resources_usage ADD CONSTRAINT resources_usage__UN_worker_slot_date UNIQUE ( worker , time_slot , calendar_date ) ;


CREATE TABLE resources_usage_params
  (
    --  ERROR: Column name length exceeds maximum allowed length(30)
    allow_using_machine_without_service_days_before_date INTEGER NOT NULL
  ) ;
ALTER TABLE resources_usage_params ADD CONSTRAINT resources_usage_params_PK PRIMARY KEY ( allow_using_machine_without_service_days_before_date ) ;


CREATE TABLE se_dict
  (
    id_se_dict    VARCHAR (10) NOT NULL ,
    se_dict_name  VARCHAR (200) NOT NULL ,
    base_price    MONEY ,
    location_type VARCHAR (10) ,
    avg_time      INTEGER ,
    continous     BOOLEAN NOT NULL ,
    notes         VARCHAR (400)
  ) ;
CREATE INDEX se_dict__IDX ON se_dict
  ( id_se_dict ASC , se_dict_name ASC
  ) ;
ALTER TABLE se_dict ADD CONSTRAINT se_dict_PK PRIMARY KEY ( id_se_dict ) ;
ALTER TABLE se_dict ADD CONSTRAINT se_dict__UN UNIQUE ( se_dict_name ) ;


CREATE TABLE se_discount
  (
    id_se_discount SERIAL ,
    discount       VARCHAR (10) NOT NULL ,
    service        INTEGER NOT NULL ,
    company_branch VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;


CREATE TABLE se_requirement
  (
    id_se_requirement   SERIAL NOT NULL ,
    service_code        VARCHAR (10) NOT NULL ,
    machine_type        VARCHAR (10) ,
    worker_ability      INTEGER ,
    qty                 REAL DEFAULT 1 ,
    activity_sort_order INTEGER ,
    activity_name       VARCHAR (200) ,
    time_minutes        INTEGER
  ) ;
CREATE INDEX se_requirement__IDX ON se_requirement
  ( service_code ASC
  ) ;
ALTER TABLE se_requirement ADD CONSTRAINT se_requirement_PK PRIMARY KEY ( id_se_requirement ) ;


CREATE TABLE service
  (
    id_service               SERIAL NOT NULL ,
    is_confirmed             BOOLEAN ,
    service_code             VARCHAR (10) NOT NULL ,
    client                   INTEGER NOT NULL ,
    location                 INTEGER ,
    create_invoice           BOOLEAN ,
    service_discount_amount  MONEY ,
    service_discount_percent REAL ,
    min_start_datetime       TIMESTAMP DEFAULT CURRENT_TIMESTAMP ,
    planned_start            DATE ,
    planned_end              DATE ,
    real_start               DATE ,
    real_end                 DATE ,
    reminder_sms_minutes     INTEGER ,
    reminder_email_minutes   INTEGER ,
    finished_info_sms        BOOLEAN ,
    finished_info_email      BOOLEAN ,
    notes                    VARCHAR (400) ,
    created_datetime         TIMESTAMP DEFAULT CURRENT_TIMESTAMP ,
    created_by               VARCHAR (10) DEFAULT 'current_user' ,
    confirmed_datetime       TIMESTAMP ,
    confirmed_by             VARCHAR (10) ,
    company_branch           VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
CREATE INDEX service__IDX ON service
  ( id_service ASC
  ) ;
ALTER TABLE service ADD CONSTRAINT service_PK PRIMARY KEY ( id_service ) ;


CREATE TABLE service_archived
  (
    id_service_archived      SERIAL NOT NULL ,
    id_service               INTEGER NOT NULL ,
    service_code             VARCHAR (10) NOT NULL ,
    service_name             VARCHAR (200) ,
    service_discount_amount  REAL ,
    service_discount_percent REAL ,
    client                   INTEGER NOT NULL ,
    client_first_name        VARCHAR (20) ,
    client_last_name         VARCHAR (20) ,
    client_name              VARCHAR (200) ,
    client_discount          REAL ,
    location                 INTEGER ,
    location_name            VARCHAR (200) ,
    planned_start            DATE ,
    planned_end              DATE ,
    real_start               DATE ,
    real_end                 DATE ,
    reminder_sms_minutes     INTEGER ,
    reminder_email_minutes   INTEGER ,
    finished_info_sms        BOOLEAN ,
    finished_info_email      BOOLEAN ,
    notes                    VARCHAR (400) ,
    created_datetime         TIMESTAMP DEFAULT CURRENT_TIMESTAMP ,
    created_by               VARCHAR (10) DEFAULT 'current_user' ,
    is_confirmed             BOOLEAN ,
    confirmed_datetime       TIMESTAMP ,
    confirmed_by             VARCHAR (10) ,
    is_deleted               BOOLEAN ,
    deleted_timestamp        TIMESTAMP ,
    deleted_by               VARCHAR (10) ,
    deleted_reason           VARCHAR (400) ,
    company_branch           VARCHAR (10) NOT NULL ,
    min_start_datetime       TIMESTAMP
  ) ;
ALTER TABLE service_archived ADD CONSTRAINT service_archived_PK PRIMARY KEY ( id_service_archived ) ;


CREATE TABLE sex_dict
  (
    id_sex_dict CHAR (1) NOT NULL ,
    sex         VARCHAR (10)
  ) ;
ALTER TABLE sex_dict ADD CONSTRAINT sex_dict_PK PRIMARY KEY ( id_sex_dict ) ;


CREATE TABLE time_slot_list
  ( id_time_slot TIMESTAMP NOT NULL
  ) ;
ALTER TABLE time_slot_list ADD CONSTRAINT time_slot_list_PK PRIMARY KEY ( id_time_slot ) ;


CREATE TABLE time_slot_params
  ( time_slot_minutes INTEGER NOT NULL
  ) ;


CREATE TABLE wo_ability
  (
    id_wo_ability  SERIAL NOT NULL ,
    worker         INTEGER NOT NULL ,
    worker_ability VARCHAR (10) NOT NULL ,
    notes          VARCHAR (400) ,
    company_branch VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
ALTER TABLE wo_ability ADD CONSTRAINT wo_ability_PK PRIMARY KEY ( id_wo_ability ) ;


CREATE TABLE wo_ability_dict
  (
    id_wo_ability_dict VARCHAR (10) NOT NULL ,
    ability_name       VARCHAR (200) NOT NULL ,
    ability_group      VARCHAR (10)
  ) ;
ALTER TABLE wo_ability_dict ADD CONSTRAINT wo_ability_dict_PK PRIMARY KEY ( id_wo_ability_dict ) ;


CREATE TABLE wo_ability_group_dict
  (
    id_wo_ablility_group_dict VARCHAR (10) NOT NULL ,
    ability_group_name        VARCHAR (200) NOT NULL
  ) ;
ALTER TABLE wo_ability_group_dict ADD CONSTRAINT wo_ability_group_dict_PK PRIMARY KEY ( id_wo_ablility_group_dict ) ;
ALTER TABLE wo_ability_group_dict ADD CONSTRAINT wo_ability_group_dict__UN UNIQUE ( ability_group_name ) ;


CREATE TABLE wo_absence
  (
    id_wo_absence  INTEGER NOT NULL ,
    worker         INTEGER NOT NULL ,
    absence_type   VARCHAR (10) NOT NULL ,
    start_datetime TIMESTAMP ,
    end_datetime   TIMESTAMP ,
    workdays       INTEGER ,
    hours          REAL ,
    notes          VARCHAR (400) ,
    company_branch VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
ALTER TABLE wo_absence ADD CONSTRAINT wo_absence_PK PRIMARY KEY ( id_wo_absence ) ;


CREATE TABLE wo_absence_type
  (
    id_wo_absence_type VARCHAR (10) NOT NULL ,
    absence_name       VARCHAR (200)
  ) ;
ALTER TABLE wo_absence_type ADD CONSTRAINT wo_absence_type_PK PRIMARY KEY ( id_wo_absence_type ) ;
ALTER TABLE wo_absence_type ADD CONSTRAINT worker_absence_type__UN UNIQUE ( absence_name ) ;


CREATE TABLE wo_group
  (
    id_wo_group    SERIAL NOT NULL ,
    worker         INTEGER NOT NULL ,
    worker_group   VARCHAR (10) NOT NULL ,
    company_branch VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
ALTER TABLE wo_group ADD CONSTRAINT wo_group_PK PRIMARY KEY ( id_wo_group ) ;


CREATE TABLE wo_group_dict
  (
    id_wo_group_dict  VARCHAR (10) NOT NULL ,
    worker_group_name VARCHAR (200)
  ) ;
ALTER TABLE wo_group_dict ADD CONSTRAINT wo_group_dict_PK PRIMARY KEY ( id_wo_group_dict ) ;


CREATE TABLE wo_group_privilege
  (
    id_wo_group_privilege SERIAL NOT NULL ,
    worker_group          VARCHAR (10) NOT NULL ,
    privilege_id          INTEGER NOT NULL ,
    view_id               VARCHAR (100) ,
    privilege_level       VARCHAR (10) NOT NULL
  ) ;
ALTER TABLE wo_group_privilege ADD CONSTRAINT wo_group_privilege_PK PRIMARY KEY ( id_wo_group_privilege ) ;
ALTER TABLE wo_group_privilege ADD CONSTRAINT wo_group_privilege__UN UNIQUE ( worker_group , privilege_id ) ;


CREATE TABLE wo_notification
  (
    id_wo_notification   SERIAL NOT NULL ,
    worker               INTEGER NOT NULL ,
    worker_group         VARCHAR (10) NOT NULL ,
    notification_subject VARCHAR (200) ,
    notification_text    VARCHAR (400) ,
    severity             INTEGER ,
    marked_as_read       BOOLEAN ,
    company_branch       VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
ALTER TABLE wo_notification ADD CONSTRAINT wo_notification_PK PRIMARY KEY ( id_wo_notification ) ;


CREATE TABLE wo_privilege_dict
  (
    id_wo_privilige_dict INTEGER NOT NULL ,
    privilege_name       VARCHAR (200)
  ) ;
ALTER TABLE wo_privilege_dict ADD CONSTRAINT wo_privilige_dict_PK PRIMARY KEY ( id_wo_privilige_dict ) ;
ALTER TABLE wo_privilege_dict ADD CONSTRAINT wo_privilege_dict__UN UNIQUE ( privilege_name ) ;


CREATE TABLE wo_privilege_level_dict
  (
    id_wo_privilege_level_dict VARCHAR (10) NOT NULL
  ) ;
ALTER TABLE wo_privilege_level_dict ADD CONSTRAINT wo_privilege_level_dict_PK PRIMARY KEY ( id_wo_privilege_level_dict ) ;


CREATE TABLE wo_user
  (
    app_user VARCHAR (10) NOT NULL ,
    worker   INTEGER NOT NULL
  ) ;
ALTER TABLE wo_user ADD CONSTRAINT worker_user_PK PRIMARY KEY ( app_user ) ;


CREATE TABLE workday_calendar
  (
    id_workday_calendar DATE NOT NULL ,
    is_workday          BOOLEAN NOT NULL ,
    work_start          DATE ,
    work_end            DATE ,
    company_branch      VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
ALTER TABLE workday_calendar ADD CONSTRAINT workday_calendar_PK PRIMARY KEY ( id_workday_calendar ) ;


CREATE TABLE workday_calendar_params
  (
    default_workday_start_time  DATE ,
    default_workday_end_time    DATE ,
    default_saturday_start_time DATE ,
    default_saturday_end_time   DATE ,
    default_is_saturday_workday BOOLEAN NOT NULL
  ) ;


CREATE TABLE worker
  (
    id_worker      SERIAL NOT NULL ,
    first_name     VARCHAR (20) ,
    last_name      VARCHAR (20) ,
    worker_title   VARCHAR (200) ,
    active         BOOLEAN ,
    contact        INTEGER ,
    notes          VARCHAR (400) ,
    company_branch VARCHAR (10) DEFAULT 'main' NOT NULL
  ) ;
CREATE INDEX worker__IDX ON worker
  ( id_worker ASC
  ) ;
ALTER TABLE worker ADD CONSTRAINT worker_PK PRIMARY KEY ( id_worker ) ;
ALTER TABLE worker ADD COLUMN worker_user_login INTEGER;
ALTER TABLE worker ADD CONSTRAINT worker_worker_user_login_auth_user_FK FOREIGN KEY ( worker_user_login ) REFERENCES auth_user ( id ) ;



CREATE TABLE zip_codes_dict
  (
    id_zip_codes_dict SERIAL NOT NULL ,
    country           VARCHAR (100) NOT NULL ,
    zip               VARCHAR (10) ,
    city              VARCHAR (100)
  ) ;
ALTER TABLE zip_codes_dict ADD CONSTRAINT zip_codes_dict_PK PRIMARY KEY ( id_zip_codes_dict ) ;


--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE cl_communication_log ADD CONSTRAINT cl_communication_log_cl_communication_reason_FK FOREIGN KEY ( communication_reason ) REFERENCES cl_communication_reason ( id_client_communication_reason ) ;

ALTER TABLE cl_communication_log ADD CONSTRAINT cl_communication_log_client_FK FOREIGN KEY ( client ) REFERENCES client ( id_client ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE cl_communication_log ADD CONSTRAINT cl_communication_log_company_branch_FK FOREIGN KEY ( company_branch ) REFERENCES company_branch ( id_company_branch ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE cl_communication_log ADD CONSTRAINT cl_communication_log_contact_type_FK FOREIGN KEY ( contact_type ) REFERENCES contact_type ( id_contact_type ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE cl_communication_log ADD CONSTRAINT cl_communication_log_service_FK FOREIGN KEY ( service ) REFERENCES service ( id_service ) ;

ALTER TABLE cl_discount ADD CONSTRAINT cl_discount_client_FK FOREIGN KEY ( client ) REFERENCES client ( id_client ) ;

ALTER TABLE cl_discount ADD CONSTRAINT cl_discount_discount_dict_FK FOREIGN KEY ( discount ) REFERENCES discount_dict ( id_discount_dict ) ;

ALTER TABLE cl_payment ADD CONSTRAINT cl_payment_client_FK FOREIGN KEY ( client ) REFERENCES client ( id_client ) ;

ALTER TABLE cl_payment ADD CONSTRAINT cl_payment_company_branch_FK FOREIGN KEY ( company_branch ) REFERENCES company_branch ( id_company_branch ) ;

ALTER TABLE cl_payment ADD CONSTRAINT cl_payment_contact_FK FOREIGN KEY ( contact ) REFERENCES contact ( id_contact ) ;

ALTER TABLE cl_payment ADD CONSTRAINT cl_payment_currrency_FK FOREIGN KEY ( currency ) REFERENCES currrency ( id_currency ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE cl_payment_line ADD CONSTRAINT cl_payment_line_company_branch_FK FOREIGN KEY ( company_branch ) REFERENCES company_branch ( id_company_branch ) ;

ALTER TABLE cl_payment_line ADD CONSTRAINT cl_payment_line_currrency_FK FOREIGN KEY ( currency ) REFERENCES currrency ( id_currency ) ;

ALTER TABLE cl_payment_line ADD CONSTRAINT cl_payment_line_payment_FK FOREIGN KEY ( payment ) REFERENCES cl_payment ( id_cl_payment ) ;

ALTER TABLE cl_payment_line ADD CONSTRAINT cl_payment_line_service_FK FOREIGN KEY ( service ) REFERENCES service ( id_service ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE cl_unconfirmed ADD CONSTRAINT cl_unconfirmed_company_branch_FK FOREIGN KEY ( default_company_branch ) REFERENCES company_branch ( id_company_branch ) ;

ALTER TABLE client ADD CONSTRAINT client_blocked_reason_dict_FK FOREIGN KEY ( blocked_reason_id ) REFERENCES cl_blocked_reason_dict ( id_cl_blocked_reason_dict ) ;

ALTER TABLE client ADD CONSTRAINT client_company_branch_FK FOREIGN KEY ( default_company_branch ) REFERENCES company_branch ( id_company_branch ) ;

ALTER TABLE client ADD CONSTRAINT client_contact_FK FOREIGN KEY ( contact ) REFERENCES contact ( id_contact ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE cl_params ADD CONSTRAINT client_params_company_branch_FK FOREIGN KEY ( company_branch ) REFERENCES company_branch ( id_company_branch ) ;

ALTER TABLE cl_params ADD CONSTRAINT client_params_currrency_FK FOREIGN KEY ( default_currency ) REFERENCES currrency ( id_currency ) ;

ALTER TABLE client ADD CONSTRAINT client_sex_dict_FK FOREIGN KEY ( sex ) REFERENCES sex_dict ( id_sex_dict ) ;

ALTER TABLE company_branch ADD CONSTRAINT company_branch_contact_FK FOREIGN KEY ( contact ) REFERENCES contact ( id_contact ) ;

ALTER TABLE contact ADD CONSTRAINT contact_contact_type_FK FOREIGN KEY ( prefered_contact_type ) REFERENCES contact_type ( id_contact_type ) ;

ALTER TABLE contact ADD CONSTRAINT contact_country_dict_FK FOREIGN KEY ( country ) REFERENCES country_dict ( country ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE discount_dict ADD CONSTRAINT discount_dict_discount_scope_FK FOREIGN KEY ( scope ) REFERENCES discount_scope ( id_discount_scope ) ;

ALTER TABLE location ADD CONSTRAINT location_company_branch_FK FOREIGN KEY ( company_branch ) REFERENCES company_branch ( id_company_branch ) ;

ALTER TABLE location ADD CONSTRAINT location_location_type_FK FOREIGN KEY ( location_type ) REFERENCES location_type ( id_location_type ) ;

ALTER TABLE machine ADD CONSTRAINT machine_company_branch_FK FOREIGN KEY ( company_branch ) REFERENCES company_branch ( id_company_branch ) ;

ALTER TABLE machine ADD CONSTRAINT machine_machine_type_FK FOREIGN KEY ( machine_type ) REFERENCES machine_type ( id_machine_type ) ;

ALTER TABLE resources_usage ADD CONSTRAINT resource_usage_machine_FK FOREIGN KEY ( machine ) REFERENCES machine ( id_machine ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE resources_usage ADD CONSTRAINT resources_usage_company_branch_FK FOREIGN KEY ( company_branch ) REFERENCES company_branch ( id_company_branch ) ;

ALTER TABLE resources_usage ADD CONSTRAINT resources_usage_service_FK FOREIGN KEY ( service ) REFERENCES service ( id_service ) ON
DELETE CASCADE ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE resources_usage ADD CONSTRAINT resources_usage_time_slot_list_FK FOREIGN KEY ( time_slot ) REFERENCES time_slot_list ( id_time_slot ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE resources_usage ADD CONSTRAINT resources_usage_workday_calendar_FK FOREIGN KEY ( calendar_date ) REFERENCES workday_calendar ( id_workday_calendar ) ;

ALTER TABLE resources_usage ADD CONSTRAINT resources_usage_worker_FK FOREIGN KEY ( worker ) REFERENCES worker ( id_worker ) ;

ALTER TABLE se_dict ADD CONSTRAINT se_dict_location_type_FK FOREIGN KEY ( location_type ) REFERENCES location_type ( id_location_type ) ;

ALTER TABLE se_discount ADD CONSTRAINT se_discount_discount_dict_FK FOREIGN KEY ( discount ) REFERENCES discount_dict ( id_discount_dict ) ;

ALTER TABLE se_discount ADD CONSTRAINT se_discount_service_FK FOREIGN KEY ( service ) REFERENCES service ( id_service ) ;

ALTER TABLE se_requirement ADD CONSTRAINT se_requirement_machine_type_FK FOREIGN KEY ( machine_type ) REFERENCES machine_type ( id_machine_type ) ;

ALTER TABLE se_requirement ADD CONSTRAINT se_requirement_se_dict_FK FOREIGN KEY ( service_code ) REFERENCES se_dict ( id_se_dict ) ;

ALTER TABLE se_requirement ADD CONSTRAINT se_requirement_wo_ability_FK FOREIGN KEY ( worker_ability ) REFERENCES wo_ability ( id_wo_ability ) ;

ALTER TABLE service ADD CONSTRAINT service_client_FK FOREIGN KEY ( client ) REFERENCES client ( id_client ) ;

ALTER TABLE service ADD CONSTRAINT service_company_branch_FK FOREIGN KEY ( company_branch ) REFERENCES company_branch ( id_company_branch ) ;

ALTER TABLE service ADD CONSTRAINT service_location_FK FOREIGN KEY ( location ) REFERENCES location ( id_location ) ;

ALTER TABLE service ADD CONSTRAINT service_se_dict_FK FOREIGN KEY ( service_code ) REFERENCES se_dict ( id_se_dict ) ;

ALTER TABLE wo_ability ADD CONSTRAINT wo_ability_ability_dict_FK FOREIGN KEY ( worker_ability ) REFERENCES wo_ability_dict ( id_wo_ability_dict ) ;

ALTER TABLE wo_ability ADD CONSTRAINT wo_ability_company_branch_FK FOREIGN KEY ( company_branch ) REFERENCES company_branch ( id_company_branch ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE wo_ability_dict ADD CONSTRAINT wo_ability_dict_wo_ability_group_FK FOREIGN KEY ( ability_group ) REFERENCES wo_ability_group_dict ( id_wo_ablility_group_dict ) ;

ALTER TABLE wo_ability ADD CONSTRAINT wo_ability_worker_FK FOREIGN KEY ( worker ) REFERENCES worker ( id_worker ) ;

ALTER TABLE wo_absence ADD CONSTRAINT wo_absence_absence_type_FK FOREIGN KEY ( absence_type ) REFERENCES wo_absence_type ( id_wo_absence_type ) ;

ALTER TABLE wo_absence ADD CONSTRAINT wo_absence_company_branch_FK FOREIGN KEY ( company_branch ) REFERENCES company_branch ( id_company_branch ) ;

ALTER TABLE wo_absence ADD CONSTRAINT wo_absence_worker_FK FOREIGN KEY ( worker ) REFERENCES worker ( id_worker ) ;

ALTER TABLE wo_group ADD CONSTRAINT wo_group_company_branch_FK FOREIGN KEY ( company_branch ) REFERENCES company_branch ( id_company_branch ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE wo_group_privilege ADD CONSTRAINT wo_group_privilege_wo_group_dict_FK FOREIGN KEY ( worker_group ) REFERENCES wo_group_dict ( id_wo_group_dict ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE wo_group_privilege ADD CONSTRAINT wo_group_privilege_wo_privilege_dict_FK FOREIGN KEY ( privilege_id ) REFERENCES wo_privilege_dict ( id_wo_privilige_dict ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE wo_group_privilege ADD CONSTRAINT wo_group_privilege_wo_privilege_level_dict_FK FOREIGN KEY ( privilege_level ) REFERENCES wo_privilege_level_dict ( id_wo_privilege_level_dict ) ;

ALTER TABLE wo_group ADD CONSTRAINT wo_group_wo_group_dict_FK FOREIGN KEY ( worker_group ) REFERENCES wo_group_dict ( id_wo_group_dict ) ;

ALTER TABLE wo_group ADD CONSTRAINT wo_group_worker_FK FOREIGN KEY ( worker ) REFERENCES worker ( id_worker ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE wo_notification ADD CONSTRAINT wo_notification_company_branch_FK FOREIGN KEY ( company_branch ) REFERENCES company_branch ( id_company_branch ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE wo_notification ADD CONSTRAINT wo_notification_wo_group_list_FK FOREIGN KEY ( worker_group ) REFERENCES wo_group_dict ( id_wo_group_dict ) ;

ALTER TABLE wo_notification ADD CONSTRAINT wo_notification_worker_FK FOREIGN KEY ( worker ) REFERENCES worker ( id_worker ) ;

--  ERROR: FK name length exceeds maximum allowed length(30)
ALTER TABLE workday_calendar ADD CONSTRAINT workday_calendar_company_branch_FK FOREIGN KEY ( company_branch ) REFERENCES company_branch ( id_company_branch ) ;

ALTER TABLE worker ADD CONSTRAINT worker_contact_FK FOREIGN KEY ( contact ) REFERENCES contact ( id_contact ) ;

ALTER TABLE wo_user ADD CONSTRAINT worker_user_worker_FK FOREIGN KEY ( worker ) REFERENCES worker ( id_worker ) ;

ALTER TABLE zip_codes_dict ADD CONSTRAINT zip_codes_dict_country_dict_FK FOREIGN KEY ( country ) REFERENCES country_dict ( country ) ;

CREATE OR REPLACE VIEW CLIENT_BLOCKED_LIST_V  AS
SELECT client.id_client,
  client.first_name,
  client.last_name,
  client.client_name,
  client.blocked_notes,
  cl_blocked_reason_dict.blocked_reason_name,
  SUM(cl_payment.payment_sum) AS Sum_payment_sum
FROM client
LEFT JOIN cl_payment
ON client.id_client = cl_payment.client
INNER JOIN cl_blocked_reason_dict
ON cl_blocked_reason_dict.id_cl_blocked_reason_dict = client.blocked_reason_id
WHERE client.is_blocked                             = TRUE
GROUP BY client.id_client,
  client.first_name,
  client.last_name,
  client.client_name,
  client.blocked_notes,
  cl_blocked_reason_dict.blocked_reason_name,
  cl_payment.is_closed
HAVING cl_payment.is_closed = FALSE
;





CREATE OR REPLACE VIEW CLIENT_BLOCK_V  AS
SELECT client.id_client,
  client.blocked_notes,
  client.blocked_reason_id
FROM client
;





CREATE OR REPLACE VIEW CLIENT_COMMUNICATION_LOG_V  AS
SELECT cl_communication_reason.reason_name,
  client.first_name,
  client.last_name,
  client.client_name,
  contact_type.contact_type_name,
  contact.email,
  contact.phone,
  se_dict.se_dict_name,
  cl_communication_log.message_body,
  cl_communication_log.notes,
  cl_communication_log.created_by,
  cl_communication_log.created_datetime
FROM cl_communication_log
LEFT JOIN contact_type
ON contact_type.id_contact_type = cl_communication_log.contact_type
INNER JOIN contact
ON contact_type.id_contact_type = contact.prefered_contact_type
LEFT JOIN client
ON client.id_client    = cl_communication_log.client
AND contact.id_contact = client.contact
INNER JOIN service
ON service.id_service = cl_communication_log.service
INNER JOIN se_dict
ON se_dict.id_se_dict = service.service_code
LEFT JOIN cl_communication_reason
ON cl_communication_reason.id_client_communication_reason = cl_communication_log.communication_reason
;





CREATE OR REPLACE VIEW CLIENT_DETAILS_V  AS
SELECT client.id_client,
  client.first_name,
  client.last_name,
  client.is_company,
  client.client_name,
  client.nip,
  client.sex,
  client.is_blocked,
  client.blocked_reason_id,
  client.blocked_notes,
  client.is_confirmed,
  client.is_rejected,
  client.default_invoice,
  client.default_reminder_sms_minutes,
  client.default_reminder_email_minutes,
  client.default_finished_info_sms,
  client.default_finished_info_email,
  client.client_discount_percent_sum,
  client.ip_address,
  client.notes AS client_notes,
  contact.prefered_contact_type,
  contact.email,
  contact.phone,
  contact.street,
  contact.apartment_no,
  contact.city,
  contact.house_no,
  contact.zip,
  contact.country,
  contact.notes AS contact_notes
FROM client
LEFT JOIN contact
ON contact.id_contact = client.contact
;





CREATE OR REPLACE VIEW CLIENT_LIST_V  AS
SELECT client.id_client,
  client.first_name,
  client.last_name,
  client.client_name,
  client.is_blocked,
  client.notes,
  SUM(cl_payment.payment_sum) AS Sum_payment_sum
FROM client
LEFT JOIN cl_payment
ON client.id_client       = cl_payment.client
WHERE client.is_confirmed = TRUE
AND cl_payment.is_closed  = FALSE
AND client.is_rejected    = FALSE
GROUP BY client.id_client,
  client.first_name,
  client.last_name,
  client.client_name,
  client.is_blocked,
  client.notes
;





CREATE OR REPLACE VIEW CLIENT_NOT_ACCEPTED_LIST_V  AS
SELECT client.id_client,
  client.first_name,
  client.last_name,
  client.client_name,
  client.is_rejected,
  contact.prefered_contact_type,
  contact.email,
  contact.phone,
  client.ip_address
FROM client
LEFT JOIN contact
ON contact.id_contact    = client.contact
WHERE client.is_rejected = FALSE
;





CREATE OR REPLACE VIEW CLIENT_PARAMS_V  AS
SELECT cl_params.max_debt,
  cl_params.default_reminder_sms_minutes,
  cl_params.default_reminder_email_minutes,
  cl_params.default_finished_info_sms,
  cl_params.default_finished_info_email,
  cl_params.max_worktime_wo_conf_minutes,
  cl_params.default_currency,
  cl_params.allow_new_no_contact
FROM cl_params
;





CREATE OR REPLACE VIEW CLIENT_PAYMENT_LINE_V  AS
SELECT cl_payment_line.id_cl_payment_line,
  se_dict.se_dict_name,
  cl_payment_line.text_on_invoice,
  cl_payment_line.qty,
  cl_payment_line.final_price,
  se_dict.base_price,
  service.real_end,
  client.id_client,
  cl_payment.invoice_voucher
FROM cl_payment_line
INNER JOIN cl_payment
ON cl_payment.id_cl_payment = cl_payment_line.payment
INNER JOIN client
ON client.id_client = cl_payment.client
INNER JOIN service
ON service.id_service = cl_payment_line.service
AND client.id_client  = service.client
INNER JOIN se_dict
ON se_dict.id_se_dict = service.service_code
;





CREATE OR REPLACE VIEW CLIENT_PAYMENT_LIST_ALL_V  AS
SELECT cl_payment.id_cl_payment,
  cl_payment.is_closed,
  client.first_name,
  client.last_name,
  client.client_name,
  cl_payment.is_invoice,
  cl_payment.invoice_voucher,
  cl_payment.payment_name,
  cl_payment.payment_sum,
  cl_payment.posted_datetime,
  cl_payment.due_date,
  cl_payment.paid_datetime,
  cl_payment.notes
FROM cl_payment
LEFT JOIN client
ON client.id_client = cl_payment.client
;





CREATE OR REPLACE VIEW CLIENT_PAYMENT_LIST_CLOSED_V  AS
SELECT cl_payment.id_cl_payment,
  cl_payment.is_closed,
  client.first_name,
  client.last_name,
  client.client_name,
  cl_payment.payment_name,
  cl_payment.is_invoice,
  cl_payment.invoice_voucher,
  cl_payment.payment_sum,
  cl_payment.posted_datetime,
  cl_payment.due_date,
  cl_payment.paid_datetime,
  cl_payment.notes
FROM cl_payment
LEFT JOIN client
ON client.id_client        = cl_payment.client
WHERE cl_payment.is_closed = TRUE
;





CREATE OR REPLACE VIEW CLIENT_PAYMENT_LIST_POSTED_UNPAID_V  AS
SELECT cl_payment.id_cl_payment,
  cl_payment.is_closed,
  client.first_name,
  client.last_name,
  client.client_name,
  cl_payment.payment_name,
  cl_payment.is_invoice,
  cl_payment.invoice_voucher,
  cl_payment.payment_sum,
  cl_payment.posted_datetime,
  cl_payment.due_date,
  cl_payment.paid_datetime,
  cl_payment.notes
FROM cl_payment
LEFT JOIN client
ON client.id_client               = cl_payment.client
WHERE cl_payment.posted_datetime IS NOT NULL
AND cl_payment.paid_datetime     IS NULL
;





CREATE OR REPLACE VIEW CLIENT_PAYMENT_LIST_UNPOSTED_V  AS
SELECT cl_payment.id_cl_payment,
  cl_payment.is_closed,
  client.first_name,
  client.last_name,
  client.client_name,
  cl_payment.payment_name,
  cl_payment.is_invoice,
  cl_payment.invoice_voucher,
  cl_payment.payment_sum,
  cl_payment.posted_datetime,
  cl_payment.due_date,
  cl_payment.paid_datetime,
  cl_payment.notes
FROM cl_payment
LEFT JOIN client
ON client.id_client               = cl_payment.client
WHERE cl_payment.posted_datetime IS NULL
;





CREATE OR REPLACE VIEW CLIENT_PAYMENT_V  AS
SELECT cl_payment_line.id_cl_payment_line,
  client.id_client,
  client.first_name,
  client.last_name,
  client.client_name,
  client.nip,
  contact_client.street,
  contact_client.house_no,
  contact_client.apartment_no,
  contact_client.city,
  contact_client.country,
  contact_client.zip,
  cl_payment.invoice_voucher,
  cl_payment.payment_sum,
  cl_payment.posted_datetime,
  cl_payment.due_date,
  cl_payment.created_by,
  company_branch.company_name         AS company_branch_company_name,
  company_branch.nip                  AS company_branch_nip,
  contact_company_branch.email        AS company_branch_email,
  contact_company_branch.phone        AS company_branch_phone,
  contact_company_branch.street       AS company_branch_street,
  contact_company_branch.house_no     AS company_branch_house_no,
  contact_company_branch.apartment_no AS company_branch_apartment_no,
  contact_company_branch.city         AS company_branch_city,
  contact_company_branch.zip          AS company_branch_zip,
  contact_company_branch.country      AS company_branch_country
FROM cl_payment
LEFT JOIN cl_payment_line
ON cl_payment.id_cl_payment = cl_payment_line.payment
LEFT JOIN client
ON client.id_client = cl_payment.client
INNER JOIN company_branch
ON company_branch.id_company_branch = cl_payment.company_branch
INNER JOIN contact contact_company_branch
ON contact_company_branch.id_contact = company_branch.contact
LEFT JOIN contact contact_client
ON client.contact = contact_client.id_contact
;





CREATE OR REPLACE VIEW DISCOUNT_V  AS
SELECT discount_dict.id_discount_dict,
  discount_dict.scope,
  discount_dict.discount_name,
  discount_dict.discount_amount,
  discount_dict.discount_percent,
  discount_dict.valid_from,
  discount_dict.valid_to
FROM discount_dict
;





CREATE OR REPLACE VIEW LOCATION_TYPE_DETAILS_V  AS
SELECT location_type.id_location_type,
  location_type.location_type_name,
  location_type.location_capacity
FROM location_type
;





CREATE OR REPLACE VIEW LOCATION_TYPE_LIST_V  AS
SELECT location_type.id_location_type,
  location_type.location_type_name,
  location_type.location_capacity,
  COUNT(location.id_location) AS Count_id_location
FROM location_type
LEFT JOIN location
ON location_type.id_location_type = location.location_type
GROUP BY location_type.id_location_type,
  location_type.location_type_name,
  location_type.location_capacity
;





CREATE OR REPLACE VIEW LOCATION_V  AS
SELECT location.id_location,
  location.location_name,
  location_type.location_type_name,
  location_type.location_capacity,
  location.is_operational,
  location.notes
FROM location
LEFT JOIN location_type
ON location_type.id_location_type = location.location_type
;





CREATE OR REPLACE VIEW MACHINE_INCOMING_SERVICES_V  AS
SELECT machine.id_machine,
  machine_type.machine_type_name,
  machine.last_service,
  machine.service_interval,
  machine.notes
FROM machine
INNER JOIN machine_type
ON machine_type.id_machine_type = machine.machine_type
;





CREATE OR REPLACE VIEW MACHINE_TYPE_DETAILS_V  AS
SELECT machine_type.id_machine_type,
  machine_type.machine_type_name
FROM machine_type
;





CREATE OR REPLACE VIEW MACHINE_TYPE_LIST_V  AS
SELECT machine_type.id_machine_type,
  machine_type.machine_type_name,
  COUNT(machine.id_machine) AS Count_id_machine
FROM machine_type
LEFT JOIN machine
ON machine_type.id_machine_type = machine.machine_type
GROUP BY machine_type.id_machine_type,
  machine_type.machine_type_name
;





CREATE OR REPLACE VIEW MACHINE_V  AS
SELECT machine.id_machine,
  machine.machine_name,
  machine_type.machine_type_name,
  machine.last_service,
  machine.service_interval,
  machine.is_operational,
  machine.notes
FROM machine
LEFT JOIN machine_type
ON machine_type.id_machine_type = machine.machine_type
;





CREATE OR REPLACE VIEW PAYMENT_LIST_OVERDUE_V  AS
SELECT cl_payment.id_cl_payment,
  cl_payment.is_closed,
  client.first_name,
  client.last_name,
  client.client_name,
  cl_payment.payment_name,
  cl_payment.is_invoice,
  cl_payment.invoice_voucher,
  cl_payment.payment_sum,
  cl_payment.posted_datetime,
  cl_payment.due_date,
  cl_payment.paid_datetime,
  cl_payment.notes
FROM cl_payment
LEFT JOIN client
ON client.id_client        = cl_payment.client
WHERE cl_payment.is_closed = FALSE
AND cl_payment.due_date    < CURRENT_DATE
;





CREATE OR REPLACE VIEW RESOURCES_USAGE_LIST_V  AS
SELECT resources_usage.calendar_date,
  MAX(resources_usage.time_slot) AS Max_time_slot,
  MIN(resources_usage.time_slot) AS Min_time_slot,
  client.last_name               AS client_last_name,
  client.first_name              AS client_first_name,
  client.client_name,
  se_dict.se_dict_name,
  worker.first_name AS worker_first_name,
  worker.last_name  AS worker_last_name,
  machine.machine_name
FROM resources_usage
LEFT JOIN service
ON service.id_service = resources_usage.service
LEFT JOIN client
ON client.id_client = service.client
LEFT JOIN worker
ON worker.id_worker = resources_usage.worker
LEFT JOIN location
ON location.id_location = service.location
LEFT JOIN machine
ON machine.id_machine = resources_usage.machine
LEFT JOIN se_dict
ON se_dict.id_se_dict = service.service_code
GROUP BY resources_usage.calendar_date,
  client.last_name,
  client.first_name,
  client.client_name,
  se_dict.se_dict_name,
  worker.first_name,
  worker.last_name,
  machine.machine_name
;





CREATE OR REPLACE VIEW RESOURCES_USAGE_PARAMS_V  AS
SELECT resources_usage_params.allow_using_machine_without_service_days_before_date
FROM resources_usage_params
;





CREATE OR REPLACE VIEW SERVICE_ACCEPT_V  AS
SELECT service.id_service,
  se_dict.se_dict_name,
  client.first_name,
  client.last_name,
  client.client_name,
  service.location,
  se_dict.base_price,
  service.service_discount_amount,
  service.service_discount_percent,
  cl_payment_line.final_price,
  service.create_invoice,
  STRING_AGG(worker.first_name, ', ') AS worker_first_name,
  STRING_AGG(worker.last_name, ', ')  AS worker_last_name,
  service.planned_start,
  service.created_datetime,
  service.planned_end,
  COUNT(cl_payment.id_cl_payment) AS Count_id_cl_payment
FROM service
INNER JOIN cl_payment_line
ON service.id_service = cl_payment_line.service
INNER JOIN se_dict
ON se_dict.id_se_dict = service.service_code
INNER JOIN client
ON client.id_client = service.client
INNER JOIN resources_usage
ON service.id_service = resources_usage.service
INNER JOIN worker
ON worker.id_worker = resources_usage.worker
LEFT JOIN cl_payment cl_payment
ON client.id_client = cl_payment.client
GROUP BY service.id_service,
  se_dict.se_dict_name,
  client.first_name,
  client.last_name,
  client.client_name,
  service.location,
  se_dict.base_price,
  service.service_discount_amount,
  service.service_discount_percent,
  cl_payment_line.final_price,
  service.create_invoice,
  service.planned_start,
  service.created_datetime,
  service.planned_end
;





CREATE OR REPLACE VIEW SERVICE_DETAILS_V  AS
SELECT service.service_code,
  service.is_confirmed,
  service.client,
  service.min_start_datetime,
  service.service_discount_amount,
  service.service_discount_percent,
  service.reminder_sms_minutes,
  service.reminder_email_minutes,
  service.finished_info_sms,
  service.finished_info_email,
  service.create_invoice,
  service.notes
FROM service
;





CREATE OR REPLACE VIEW SERVICE_DICT_DETAILS_V  AS
SELECT se_dict.id_se_dict,
  se_dict.se_dict_name,
  se_dict.location_type,
  se_dict.avg_time,
  se_dict.continous,
  se_dict.base_price,
  se_dict.notes,
  se_requirement.qty,
  se_requirement.machine_type,
  se_requirement.worker_ability
FROM se_dict
LEFT JOIN se_requirement
ON se_dict.id_se_dict = se_requirement.service_code
;





CREATE OR REPLACE VIEW SERVICE_DICT_LIST_V  AS
SELECT se_dict.id_se_dict,
  se_dict.se_dict_name,
  se_dict.location_type,
  se_dict.continous,
  se_dict.avg_time,
  se_dict.base_price,
  se_dict.notes
FROM se_dict
;





CREATE OR REPLACE VIEW SERVICE_LIST_V ( id_service, se_dict_name, first_name, last_name, client_name, location_name, create_invoice, invoice_voucher, base_price, final_price, planned_start, planned_end, real_start, real_end, paid_datetime, service_notes, confirmed_by ) AS
SELECT service.id_service,
  se_dict.se_dict_name,
  client.first_name,
  client.last_name,
  client.client_name,
  location.location_name,
  service.create_invoice,
  cl_payment.invoice_voucher,
  se_dict.base_price,
  cl_payment_line.final_price,
  service.planned_start,
  service.planned_end,
  service.real_start,
  service.real_end,
  cl_payment.paid_datetime,
  service.confirmed_by,
  service.notes
FROM service
LEFT JOIN client
ON client.id_client = service.client
INNER JOIN se_dict
ON se_dict.id_se_dict = service.service_code
LEFT JOIN location
ON location.id_location = service.location
LEFT JOIN cl_payment_line
ON service.id_service = cl_payment_line.service
LEFT JOIN cl_payment
ON cl_payment.id_cl_payment = cl_payment_line.payment
;





CREATE OR REPLACE VIEW TIME_SLOT_PARAMS_V  AS
SELECT time_slot_params.time_slot_minutes FROM time_slot_params
;





CREATE OR REPLACE VIEW WORKDAY_CALENDAR_V  AS
SELECT workday_calendar.id_workday_calendar,
  workday_calendar.is_workday,
  workday_calendar.work_start,
  workday_calendar.work_end
FROM workday_calendar
;





CREATE OR REPLACE VIEW WORKER_ABILITY_DETAILS_V  AS
SELECT wo_ability.worker,
  wo_ability.worker_ability,
  wo_ability.notes
FROM wo_ability
;





CREATE OR REPLACE VIEW WORKER_ABILITY_DICT_DETAILS_V  AS
SELECT wo_ability_dict.id_wo_ability_dict,
  wo_ability_dict.ability_name,
  wo_ability_group_dict.ability_group_name
FROM wo_ability_dict
LEFT JOIN wo_ability_group_dict
ON wo_ability_group_dict.id_wo_ablility_group_dict = wo_ability_dict.ability_group
;





CREATE OR REPLACE VIEW WORKER_ABILITY_DICT_LIST_V  AS
SELECT wo_ability_dict.id_wo_ability_dict,
  wo_ability_dict.ability_name,
  wo_ability_group_dict.ability_group_name,
  COUNT(wo_ability.worker) AS Count_worker
FROM wo_ability_dict
LEFT JOIN wo_ability_group_dict
ON wo_ability_group_dict.id_wo_ablility_group_dict = wo_ability_dict.ability_group
LEFT JOIN wo_ability
ON wo_ability_dict.id_wo_ability_dict = wo_ability.worker_ability
GROUP BY wo_ability_dict.id_wo_ability_dict,
  wo_ability_dict.ability_name,
  wo_ability_group_dict.ability_group_name
;





CREATE OR REPLACE VIEW WORKER_ABILITY_GROUP_DICT_DETAILS_V  AS
SELECT wo_ability_group_dict.id_wo_ablility_group_dict,
  wo_ability_group_dict.ability_group_name
FROM wo_ability_group_dict
;





CREATE OR REPLACE VIEW WORKER_ABILITY_GROUP_DICT_LIST_V  AS
SELECT wo_ability_group_dict.ability_group_name,
  wo_ability_group_dict.id_wo_ablility_group_dict,
  COUNT(wo_ability_dict.id_wo_ability_dict) AS Count_id_wo_ability_dict
FROM wo_ability_group_dict
INNER JOIN wo_ability_dict
ON wo_ability_group_dict.id_wo_ablility_group_dict = wo_ability_dict.ability_group
GROUP BY wo_ability_group_dict.ability_group_name,
  wo_ability_group_dict.id_wo_ablility_group_dict
;





CREATE OR REPLACE VIEW WORKER_ABILITY_LIST_V  AS
SELECT worker.id_worker,
  worker.first_name,
  worker.last_name,
  wo_ability_dict.ability_name,
  wo_ability_group_dict.ability_group_name,
  wo_ability.notes
FROM wo_ability
LEFT JOIN worker
ON worker.id_worker = wo_ability.worker
LEFT JOIN wo_ability_dict
ON wo_ability_dict.id_wo_ability_dict = wo_ability.worker_ability
LEFT JOIN wo_ability_group_dict
ON wo_ability_group_dict.id_wo_ablility_group_dict = wo_ability_dict.ability_group
WHERE worker.active                                = TRUE
;





CREATE OR REPLACE VIEW WORKER_ABSENCE_ALL_V  AS
SELECT wo_absence.id_wo_absence,
  worker.first_name,
  worker.last_name,
  wo_absence_type.absence_name,
  wo_absence.start_datetime,
  wo_absence.end_datetime,
  wo_absence.notes
FROM wo_absence
INNER JOIN worker
ON worker.id_worker = wo_absence.worker
LEFT JOIN wo_absence_type
ON wo_absence_type.id_wo_absence_type = wo_absence.absence_type
ORDER BY wo_absence.start_datetime
;





CREATE OR REPLACE VIEW WORKER_ABSENCE_CALENDAR_V  AS
SELECT workday_calendar.id_workday_calendar,
  workday_calendar.is_workday,
  wo_absence.absence_type,
  wo_absence.start_datetime,
  wo_absence.end_datetime,
  worker.first_name,
  worker.last_name
FROM wo_absence
INNER JOIN worker
ON worker.id_worker = wo_absence.worker
LEFT JOIN workday_calendar
ON workday_calendar.id_workday_calendar = wo_absence.start_datetime
;





CREATE OR REPLACE VIEW WORKER_ABSENCE_CURRENT_V  AS
SELECT wo_absence.id_wo_absence,
  worker.first_name,
  worker.last_name,
  wo_absence_type.absence_name,
  wo_absence.start_datetime,
  wo_absence.end_datetime,
  wo_absence.notes
FROM wo_absence
INNER JOIN worker
ON worker.id_worker = wo_absence.worker
LEFT JOIN wo_absence_type
ON wo_absence_type.id_wo_absence_type = wo_absence.absence_type
WHERE wo_absence.start_datetime       < CURRENT_TIMESTAMP
AND wo_absence.end_datetime           > CURRENT_TIMESTAMP
ORDER BY wo_absence.start_datetime
;





CREATE OR REPLACE VIEW WORKER_ABSENCE_DETAILS_V  AS
SELECT wo_absence.worker,
  worker.first_name,
  worker.last_name,
  wo_absence_type.absence_name,
  wo_absence.start_datetime,
  wo_absence.end_datetime,
  wo_absence.notes
FROM wo_absence
INNER JOIN wo_absence_type
ON wo_absence_type.id_wo_absence_type = wo_absence.absence_type
INNER JOIN worker
ON worker.id_worker = wo_absence.worker
;





CREATE OR REPLACE VIEW WORKER_ABSENCE_ENDED_V  AS
SELECT wo_absence.id_wo_absence,
  worker.first_name,
  worker.last_name,
  wo_absence_type.absence_name,
  wo_absence.start_datetime,
  wo_absence.end_datetime,
  wo_absence.notes
FROM wo_absence
INNER JOIN worker
ON worker.id_worker = wo_absence.worker
LEFT JOIN wo_absence_type
ON wo_absence_type.id_wo_absence_type = wo_absence.absence_type
WHERE wo_absence.end_datetime         < CURRENT_TIMESTAMP
ORDER BY wo_absence.start_datetime
;





CREATE OR REPLACE VIEW WORKER_ABSENCE_FUTURE_V  AS
SELECT wo_absence.id_wo_absence,
  worker.first_name,
  worker.last_name,
  wo_absence_type.absence_name,
  wo_absence.start_datetime,
  wo_absence.end_datetime,
  wo_absence.notes
FROM wo_absence
INNER JOIN worker
ON worker.id_worker = wo_absence.worker
LEFT JOIN wo_absence_type
ON wo_absence_type.id_wo_absence_type = wo_absence.absence_type
WHERE wo_absence.start_datetime       > CURRENT_TIMESTAMP
ORDER BY wo_absence.start_datetime
;





CREATE OR REPLACE VIEW WORKER_ABSENCE_HOUR_V  AS
SELECT wo_absence.id_wo_absence,
  worker.first_name,
  worker.last_name,
  wo_absence_type.absence_name,
  wo_absence.start_datetime,
  wo_absence.end_datetime,
  wo_absence.notes
FROM wo_absence
INNER JOIN worker
ON worker.id_worker = wo_absence.worker
LEFT JOIN wo_absence_type
ON wo_absence_type.id_wo_absence_type    = wo_absence.absence_type
WHERE wo_absence_type.id_wo_absence_type = 'GODZ'
ORDER BY wo_absence.start_datetime
;





CREATE OR REPLACE VIEW WORKER_ABSENCE_OTHER_V  AS
SELECT wo_absence.id_wo_absence,
  worker.first_name,
  worker.last_name,
  wo_absence_type.absence_name,
  wo_absence.start_datetime,
  wo_absence.end_datetime,
  wo_absence.notes
FROM wo_absence
INNER JOIN worker
ON worker.id_worker = wo_absence.worker
LEFT JOIN wo_absence_type
ON wo_absence_type.id_wo_absence_type      = wo_absence.absence_type
WHERE (wo_absence_type.id_wo_absence_type != 'CHO')
OR (wo_absence_type.id_wo_absence_type    != 'WYP')
OR (wo_absence_type.id_wo_absence_type    != 'GODZ')
ORDER BY wo_absence.start_datetime
;





CREATE OR REPLACE VIEW WORKER_ABSENCE_RECREATIONAL_V  AS
SELECT wo_absence.id_wo_absence,
  worker.first_name,
  worker.last_name,
  wo_absence_type.absence_name,
  wo_absence.start_datetime,
  wo_absence.end_datetime,
  wo_absence.notes
FROM wo_absence
INNER JOIN worker
ON worker.id_worker = wo_absence.worker
LEFT JOIN wo_absence_type
ON wo_absence_type.id_wo_absence_type    = wo_absence.absence_type
WHERE wo_absence_type.id_wo_absence_type = 'WYP'
ORDER BY wo_absence.start_datetime
;





CREATE OR REPLACE VIEW WORKER_ABSENCE_SICK_V  AS
SELECT wo_absence.id_wo_absence,
  worker.first_name,
  worker.last_name,
  wo_absence_type.absence_name,
  wo_absence.start_datetime,
  wo_absence.end_datetime,
  wo_absence.notes
FROM wo_absence
INNER JOIN worker
ON worker.id_worker = wo_absence.worker
INNER JOIN wo_absence_type
ON wo_absence_type.id_wo_absence_type    = wo_absence.absence_type
WHERE wo_absence_type.id_wo_absence_type = 'CHO'
ORDER BY wo_absence.start_datetime
;





CREATE OR REPLACE VIEW WORKER_DETAILS_V  AS
SELECT worker.id_worker,
  worker.active,
  worker.first_name,
  worker.last_name,
  worker.worker_title,
  worker.notes,
  contact.prefered_contact_type,
  contact.email,
  contact.phone,
  contact.street,
  contact.house_no,
  contact.apartment_no,
  contact.city,
  contact.zip,
  contact.country,
  contact.notes AS notes1
FROM worker
INNER JOIN contact
ON contact.id_contact = worker.contact
;





CREATE OR REPLACE VIEW WORKER_GROUP_DICT_DETAILS_V  AS
SELECT wo_group_dict.id_wo_group_dict,
  wo_group_dict.worker_group_name
FROM wo_group_dict
;





CREATE OR REPLACE VIEW WORKER_GROUP_DICT_LIST_V  AS
SELECT wo_group_dict.id_wo_group_dict,
  wo_group_dict.worker_group_name,
  COUNT(wo_group.worker) AS Count_worker
FROM wo_group_dict
LEFT JOIN wo_group
ON wo_group_dict.id_wo_group_dict = wo_group.worker_group
GROUP BY wo_group_dict.id_wo_group_dict,
  wo_group_dict.worker_group_name
;





CREATE OR REPLACE VIEW WORKER_GROUP_PRIVILEGE_V  AS
SELECT wo_group_privilege.view_id,
  wo_group_privilege.privilege_level,
  wo_group_dict.worker_group_name
FROM wo_group_privilege
LEFT JOIN wo_group_dict
ON wo_group_dict.id_wo_group_dict = wo_group_privilege.worker_group
;





CREATE OR REPLACE VIEW WORKER_LIST_ACTIVE_V  AS
SELECT worker.id_worker,
  worker.active,
  worker.first_name,
  worker.last_name,
  worker.worker_title,
  STRING_AGG(wo_group_dict.worker_group_name, ', ') AS Sum_worker_group_name,
  MIN(wo_absence.start_datetime)       AS Min_start_datetime,
  worker.notes
FROM worker
LEFT JOIN wo_group
ON worker.id_worker = wo_group.worker
INNER JOIN wo_group_dict
ON wo_group_dict.id_wo_group_dict = wo_group.worker_group
LEFT JOIN wo_absence
ON worker.id_worker = wo_absence.worker
GROUP BY worker.id_worker,
  worker.active,
  worker.first_name,
  worker.last_name,
  worker.worker_title,
  worker.notes
HAVING worker.active               = TRUE
AND MIN(wo_absence.start_datetime) > CURRENT_DATE
;





CREATE OR REPLACE VIEW WORKER_LIST_ALL_V  AS
SELECT worker.id_worker,
  worker.active,
  worker.first_name,
  worker.last_name,
  worker.worker_title,
  STRING_AGG(wo_group_dict.worker_group_name, ', ') AS Sum_worker_group_name,
  MIN(wo_absence.start_datetime)       AS Min_start_datetime,
  worker.notes
FROM worker
LEFT JOIN wo_group
ON worker.id_worker = wo_group.worker
INNER JOIN wo_group_dict
ON wo_group_dict.id_wo_group_dict = wo_group.worker_group
LEFT JOIN wo_absence
ON worker.id_worker = wo_absence.worker
GROUP BY worker.id_worker,
  worker.active,
  worker.first_name,
  worker.last_name,
  worker.worker_title,
  worker.notes
HAVING MIN(wo_absence.start_datetime) > CURRENT_DATE
;





CREATE OR REPLACE VIEW WORKER_LIST_INACTIVE_V  AS
SELECT worker.id_worker,
  worker.active,
  worker.first_name,
  worker.last_name,
  worker.worker_title,
  STRING_AGG(wo_group_dict.worker_group_name, ', ') AS Sum_worker_group_name,
  MIN(wo_absence.start_datetime)       AS Min_start_datetime,
  worker.notes
FROM worker
LEFT JOIN wo_group
ON worker.id_worker = wo_group.worker
INNER JOIN wo_group_dict
ON wo_group_dict.id_wo_group_dict = wo_group.worker_group
LEFT JOIN wo_absence
ON worker.id_worker = wo_absence.worker
GROUP BY worker.id_worker,
  worker.active,
  worker.first_name,
  worker.last_name,
  worker.worker_title,
  worker.notes
HAVING worker.active               = FALSE
AND MIN(wo_absence.start_datetime) > CURRENT_DATE
;





CREATE OR REPLACE VIEW WORKER_LIST_INCOMING_LEAVE_V  AS
SELECT worker.id_worker,
  worker.active,
  worker.first_name,
  worker.last_name,
  worker.worker_title,
  STRING_AGG(wo_group_dict.worker_group_name, ', ') AS Sum_worker_group_name,
  MIN(wo_absence.start_datetime)       AS Min_start_datetime,
  worker.notes
FROM worker
LEFT JOIN wo_group
ON worker.id_worker = wo_group.worker
INNER JOIN wo_group_dict
ON wo_group_dict.id_wo_group_dict = wo_group.worker_group
LEFT JOIN wo_absence
ON worker.id_worker = wo_absence.worker
GROUP BY worker.id_worker,
  worker.active,
  worker.first_name,
  worker.last_name,
  worker.worker_title,
  worker.notes
HAVING MIN(wo_absence.start_datetime) > CURRENT_DATE
;




--tutej hewing na uere
CREATE OR REPLACE VIEW WORKER_LIST_ON_LEAVE_V  AS
SELECT worker.id_worker,
  worker.active,
  worker.first_name,
  worker.last_name,
  worker.worker_title,
  STRING_AGG(wo_group_dict.worker_group_name, ', ') AS Sum_worker_group_name,
  MIN(wo_absence.start_datetime)       AS Min_start_datetime,
  wo_group_dict.worker_group_name,
  worker.notes
FROM worker
LEFT JOIN wo_group
ON worker.id_worker = wo_group.worker
INNER JOIN wo_group_dict
ON wo_group_dict.id_wo_group_dict = wo_group.worker_group
LEFT JOIN wo_absence
ON worker.id_worker = wo_absence.worker
WHERE wo_absence.start_datetime < CURRENT_TIMESTAMP
AND wo_absence.end_datetime           > CURRENT_TIMESTAMP
GROUP BY worker.id_worker,
  worker.active,
  worker.first_name,
  worker.last_name,
  worker.worker_title,
  wo_group_dict.worker_group_name,
  worker.notes
;





CREATE OR REPLACE VIEW WORKER_USER_DETAILS_V  AS
SELECT wo_user.app_user, wo_user.worker FROM wo_user
;





CREATE OR REPLACE VIEW WORKER_USER_LIST_V  AS
SELECT wo_user.app_user,
  wo_user.worker,
  worker.first_name,
  worker.last_name,
  worker.worker_title,
  worker.active,
  worker.notes
FROM wo_user
LEFT JOIN worker
ON worker.id_worker = wo_user.worker
;
